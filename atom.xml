<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[{render data-logger="jie-li"}]]></title>
  <link href="http://jielimanyili.github.com/atom.xml" rel="self"/>
  <link href="http://jielimanyili.github.com/"/>
  <updated>2013-03-19T07:44:26-07:00</updated>
  <id>http://jielimanyili.github.com/</id>
  <author>
    <name><![CDATA[Jie Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Undo first]]></title>
    <link href="http://jielimanyili.github.com/blog/2013/03/19/undo-first/"/>
    <updated>2013-03-19T06:29:00-07:00</updated>
    <id>http://jielimanyili.github.com/blog/2013/03/19/undo-first</id>
    <content type="html"><![CDATA[<p><img src="http://jielimanyili.github.com/images/blog/iphone.jpg" title="iphone" ></p>

<p>Something comes to me today. In software development or anything, especially in user experience, it&#8217;s so important to be able to undo what you have just done.</p>

<p>In real life, when you just signed and purchased a million dollar house. Next day, or even just when you walked out of the legal office, you thought, man, what I just did, I wished I would slept on this or even better, undo it. Luckily and legally, you do have three days to change your mind in most of the states, I believe. Undo is important, people need that buffer to change mind.</p>

<p>Knowing that you are able to undo things make making decisions easier. Before making an online purchase, you need to check-out a vendor&#8217;s general return policies. If you will be charged by 15% restock fee with your return, you might want to think again. Do I really want to go through this trouble? Amazon is very smart in this, that&#8217;s one of the reasons they are growing so big. They make return hassle-free. If it&#8217;s problem of the product, you print a shipping label, either they pick the package up or you drop it off at a local shipper. You are done. Money returned in no time.</p>

<p>In software design and development, we often are so excited about being able to do things. Yes, if you click this button, yes, just one click, we will create the order and we will ship it to your door next day. We often forget about undo thing or make undo easier and the most important thing is letting the user know about they can easily undo what they have done.</p>

<p>My mind is racing in all directions now on how undo can be applied and can be beneficial in a lot of fields. In software design, <code>undo</code> in the <code>Edit</code> menu. In browser, the most important user experience Back button. Trash bin on the computer. Transaction in software and database development. Aha, the most dominant and only physical big round Home button on iPhone, iPad, iPod and iEverything. The only purpose of this button is UNDO and going back. My son is 19 months when I am writing this. Never taught him this, but he knows how to use this button. I really don&#8217;t know how. Every time he ran into some apps, the next thing he did after that, was hitting that Home button. To undo thing when he was in a situation of unknown or unfamiliar. It&#8217;s in our nature!</p>

<p>Hope we all know how to build or develop something that can be undo easily. Most important, if we have undo in mind, we could build better things and less mess to clean up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to query RESTful endpoint with additional query parameters using Ember Data]]></title>
    <link href="http://jielimanyili.github.com/blog/2013/03/17/how-to-query-restful-endpoint-with-additional-query-parameters-using-ember-data/"/>
    <updated>2013-03-17T09:45:00-07:00</updated>
    <id>http://jielimanyili.github.com/blog/2013/03/17/how-to-query-restful-endpoint-with-additional-query-parameters-using-ember-data</id>
    <content type="html"><![CDATA[<h2>Problem</h2>

<p>I have an Ember web application. And I am using Ember Data&#8217;s build-in REST Adapter to call an external service endpoint. The service provides search and accepts a list of query parameters and uses them as filters to refine the search. Here is an example:</p>

<blockquote><p>http://my.website.url/rest/organizations?country=us&amp;state=ohio</p></blockquote>

<p>Pretty straight forward. Here is my Ember code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Route</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">OrganizationsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Organization</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Store</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Adapter</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">bulkCommit</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://my.website.url/rest/organizations?country=us&amp;state=ohio&quot;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Store</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">revision</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Adapter</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem was, Ember generated this URL for my service endpoint.</p>

<blockquote><p>http://my.website.url/rest/organizations?country=us&amp;state=ohio/<strong>organizations</strong></p></blockquote>

<p>Nothing wrong with Ember. It added <code>organizations</code> resource to the end of the URL. But, where should I enter my search filters so Ember will generate what I want.</p>

<h2>Research</h2>

<p>Ember Data documentation on <a href="https://github.com/basho/ember-data#querying-record-instances">Querying Record Instances</a>.</p>

<blockquote><p>&#8230;You can make a server query by passing an Object as the second parameter to find. In this case, you will get back a ModelArray object&#8230;</p></blockquote>

<h2>Solution</h2>

<p>Yes! First, I passed the search filters as a parameter to my model&#8217;s find method. Second, removed the query parameters from the adapter&#8217;s URL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Route</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">OrganizationsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Organization</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">state</span><span class="o">:</span> <span class="s1">&#39;ohio&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;us&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Store</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Adapter</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">bulkCommit</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://my.website.url/rest&quot;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Store</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">revision</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Adapter</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Aha&#8230; I have what I wanted.</h3>

<blockquote><p>http://my.website.url/rest/organizations?country=us&amp;state=ohio</p></blockquote>
]]></content>
  </entry>
  
</feed>
